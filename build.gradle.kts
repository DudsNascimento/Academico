/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    java

    // Apply the application plugin to add support for building a CLI application.
    application

    //Add spring boot to the application
    id("org.springframework.boot") version "2.3.3.RELEASE"
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1"
}

apply(plugin = "io.spring.dependency-management")

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre11")
    implementation("javax.inject:javax.inject:1")
    implementation("org.modelmapper:modelmapper:0.7.5")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.11.2")
    implementation("com.google.code.gson:gson:2.7")
    implementation("io.springfox:springfox-swagger2:2.8.0")
    implementation("io.springfox:springfox-swagger-ui:2.8.0")
    implementation("org.keycloak:keycloak-spring-boot-starter:11.0.2")
    
    // Use JUnit test framework
    testImplementation("junit:junit:4.13")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.mockito:mockito-core:3.5.11")
}

application {
    applicationDefaultJvmArgs = listOf()
    mainClassName = "com.academico.Startup"
}

tasks.create<Zip>("zip") {
    description = "Archives sources in a zip file"
    group = "Archive"

    from("src")
    archiveFileName.set("basic-demo-1.0.zip")
}

tasks.withType<JavaCompile>().configureEach {
    options.compilerArgs = listOf("-Xlint:unchecked")
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        flatDir {
            dirs("CustomTasks/build/libs")
        }
    }
    dependencies {
        classpath("com.google.guava:guava:29.0-jre")
        classpath(group = "", name = "CustomTasks")
    }
}

tasks.register<com.custom.AddEntityTask>("addEntity") {

    group = "CodeManager"
    description = "Adiciona o esqueleto de uma nova entidade nova à arquitetura, com os respectivos service, repository e validator"
    classpath = "src/main/java/com/academico"
}

tasks.register<com.custom.AddControllerTask>("addController") {

    group = "CodeManager"
    description = "Adiciona o esqueleto de um novo controller à arquitetura, com o respectivo facade"
    classpath = "src/main/java/com/academico"
}